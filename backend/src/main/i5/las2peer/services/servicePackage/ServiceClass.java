package i5.las2peer.services.$Lower_Resource_Name$;

$Additional_Import$
import java.net.HttpURLConnection;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;

import com.fasterxml.jackson.core.JsonProcessingException;

import i5.las2peer.api.Service;
import i5.las2peer.restMapper.HttpResponse;
import i5.las2peer.restMapper.MediaType;
import i5.las2peer.restMapper.RESTMapper;
import i5.las2peer.restMapper.annotations.ContentParam;
import i5.las2peer.restMapper.annotations.Version;
$Database_Import$
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Contact;
import io.swagger.annotations.Info;
import io.swagger.annotations.License;
import io.swagger.annotations.SwaggerDefinition;
import io.swagger.jaxrs.Reader;
import io.swagger.models.Swagger;
import io.swagger.util.Json;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
-{ }-

/**
 *
 * $Microservice_Name$
 *
 * This microservice was generated by the CAE (Community Application Editor). If you edit it, please
 * make sure to keep the general structure of the file and only add the body of the methods provided
 * in this main file. Private methods are also allowed, but any "deeper" functionality should be
 * outsourced to (imported) classes.
 *
 */
@Path("$Relative_Resource_Path$")
@Version("$Microservice_Version$") // this annotation is used by the XML mapper
@Api
@SwaggerDefinition(
    info = @Info(title = "$Microservice_Name$", version = "$Microservice_Version$",
        description = "A LAS2peer microservice generated by the CAE.",
        termsOfService = "none",
        contact = @Contact(name = "$Developer$", email = "CAEAddress@gmail.com") ,
        license = @License(name = "BSD",
            url = "$License_File_Address$") ) )
public class $Resource_Name$ extends Service {


$Database_Configuration$


  public $Resource_Name$() {
    // read and set properties values
    setFieldValues();
$Database_Instantiation$
  }

  // //////////////////////////////////////////////////////////////////////////////////////
  // Service methods.
  // //////////////////////////////////////////////////////////////////////////////////////


$Service_Methods$


  // //////////////////////////////////////////////////////////////////////////////////////
  // Methods required by the LAS2peer framework.
  // //////////////////////////////////////////////////////////////////////////////////////

  /**
  	 * Method for debugging purposes.
  	 * Here the concept of restMapping validation is shown.
  	 * It is important to check, if all annotations are correct and consistent.
  	 * Otherwise the service will not be accessible by the WebConnector.
  	 * Best to do it in the unit tests.
  	 * To avoid being overlooked/ignored the method is implemented here and not in the test section.
  	 * @return true, if mapping correct
  	 */
  	public boolean debugMapping() {
  		String XML_LOCATION = "./restMapping.xml";
  		String xml = getRESTMapping();

  		try {
  			RESTMapper.writeFile(XML_LOCATION, xml);
  		} catch (IOException e) {
  			// write error to logfile and console
  			logger.log(Level.SEVERE, e.toString(), e);
  			// create and publish a monitoring message
  			L2pLogger.logEvent(this, Event.SERVICE_ERROR, e.toString());
  		}

  		XMLCheck validator = new XMLCheck();
  		ValidationResult result = validator.validate(xml);

  		if (result.isValid()) {
  			return true;
  		}
  		return false;
  	}

  /**
   *
   * This method is needed for every RESTful application in LAS2peer. Please don't change.
   *
   * @return the mapping
   *
   */
  public String getRESTMapping() {
    String result = "";
    try {
      result = RESTMapper.getMethodsAsXML(this.getClass());
    } catch (Exception e) {
      // write error to logfile and console
			logger.log(Level.SEVERE, e.toString(), e);
			// create and publish a monitoring message
			L2pLogger.logEvent(this, Event.SERVICE_ERROR, e.toString());
    }
    return result;
  }


}
